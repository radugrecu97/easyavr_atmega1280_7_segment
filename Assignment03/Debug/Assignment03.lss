
Assignment03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000acc  00000b60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000acc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800206  00800206  00000b66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e4d  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca2  00000000  00000000  00001a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056c  00000000  00000000  0000272f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060e  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000279  00000000  00000000  000033f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000366f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7b c0       	rjmp	.+246    	; 0xf8 <__ctors_end>
   2:	00 00       	nop
   4:	96 c0       	rjmp	.+300    	; 0x132 <__bad_interrupt>
   6:	00 00       	nop
   8:	94 c0       	rjmp	.+296    	; 0x132 <__bad_interrupt>
   a:	00 00       	nop
   c:	92 c0       	rjmp	.+292    	; 0x132 <__bad_interrupt>
   e:	00 00       	nop
  10:	90 c0       	rjmp	.+288    	; 0x132 <__bad_interrupt>
  12:	00 00       	nop
  14:	8e c0       	rjmp	.+284    	; 0x132 <__bad_interrupt>
  16:	00 00       	nop
  18:	8c c0       	rjmp	.+280    	; 0x132 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8a c0       	rjmp	.+276    	; 0x132 <__bad_interrupt>
  1e:	00 00       	nop
  20:	88 c0       	rjmp	.+272    	; 0x132 <__bad_interrupt>
  22:	00 00       	nop
  24:	86 c0       	rjmp	.+268    	; 0x132 <__bad_interrupt>
  26:	00 00       	nop
  28:	84 c0       	rjmp	.+264    	; 0x132 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	82 c0       	rjmp	.+260    	; 0x132 <__bad_interrupt>
  2e:	00 00       	nop
  30:	80 c0       	rjmp	.+256    	; 0x132 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__bad_interrupt>
  36:	00 00       	nop
  38:	7c c0       	rjmp	.+248    	; 0x132 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7a c0       	rjmp	.+244    	; 0x132 <__bad_interrupt>
  3e:	00 00       	nop
  40:	78 c0       	rjmp	.+240    	; 0x132 <__bad_interrupt>
  42:	00 00       	nop
  44:	76 c0       	rjmp	.+236    	; 0x132 <__bad_interrupt>
  46:	00 00       	nop
  48:	74 c0       	rjmp	.+232    	; 0x132 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	72 c0       	rjmp	.+228    	; 0x132 <__bad_interrupt>
  4e:	00 00       	nop
  50:	70 c0       	rjmp	.+224    	; 0x132 <__bad_interrupt>
  52:	00 00       	nop
  54:	6e c0       	rjmp	.+220    	; 0x132 <__bad_interrupt>
  56:	00 00       	nop
  58:	6c c0       	rjmp	.+216    	; 0x132 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6a c0       	rjmp	.+212    	; 0x132 <__bad_interrupt>
  5e:	00 00       	nop
  60:	68 c0       	rjmp	.+208    	; 0x132 <__bad_interrupt>
  62:	00 00       	nop
  64:	66 c0       	rjmp	.+204    	; 0x132 <__bad_interrupt>
  66:	00 00       	nop
  68:	64 c0       	rjmp	.+200    	; 0x132 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	62 c0       	rjmp	.+196    	; 0x132 <__bad_interrupt>
  6e:	00 00       	nop
  70:	60 c0       	rjmp	.+192    	; 0x132 <__bad_interrupt>
  72:	00 00       	nop
  74:	5e c0       	rjmp	.+188    	; 0x132 <__bad_interrupt>
  76:	00 00       	nop
  78:	5c c0       	rjmp	.+184    	; 0x132 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5a c0       	rjmp	.+180    	; 0x132 <__bad_interrupt>
  7e:	00 00       	nop
  80:	58 c0       	rjmp	.+176    	; 0x132 <__bad_interrupt>
  82:	00 00       	nop
  84:	56 c0       	rjmp	.+172    	; 0x132 <__bad_interrupt>
  86:	00 00       	nop
  88:	54 c0       	rjmp	.+168    	; 0x132 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	52 c0       	rjmp	.+164    	; 0x132 <__bad_interrupt>
  8e:	00 00       	nop
  90:	50 c0       	rjmp	.+160    	; 0x132 <__bad_interrupt>
  92:	00 00       	nop
  94:	4e c0       	rjmp	.+156    	; 0x132 <__bad_interrupt>
  96:	00 00       	nop
  98:	4c c0       	rjmp	.+152    	; 0x132 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4a c0       	rjmp	.+148    	; 0x132 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	48 c0       	rjmp	.+144    	; 0x132 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	46 c0       	rjmp	.+140    	; 0x132 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c8 c1       	rjmp	.+912    	; 0x43a <__vector_42>
  aa:	00 00       	nop
  ac:	42 c0       	rjmp	.+132    	; 0x132 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	40 c0       	rjmp	.+128    	; 0x132 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	3e c0       	rjmp	.+124    	; 0x132 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3c c0       	rjmp	.+120    	; 0x132 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3a c0       	rjmp	.+116    	; 0x132 <__bad_interrupt>
  be:	00 00       	nop
  c0:	38 c0       	rjmp	.+112    	; 0x132 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	36 c0       	rjmp	.+108    	; 0x132 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	34 c0       	rjmp	.+104    	; 0x132 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	32 c0       	rjmp	.+100    	; 0x132 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	30 c0       	rjmp	.+96     	; 0x132 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	2e c0       	rjmp	.+92     	; 0x132 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2c c0       	rjmp	.+88     	; 0x132 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2a c0       	rjmp	.+84     	; 0x132 <__bad_interrupt>
  de:	00 00       	nop
  e0:	28 c0       	rjmp	.+80     	; 0x132 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	84 01       	movw	r16, r8
  e6:	87 01       	movw	r16, r14
  e8:	8a 01       	movw	r16, r20
  ea:	8d 01       	movw	r16, r26
  ec:	90 01       	movw	r18, r0
  ee:	93 01       	movw	r18, r6
  f0:	96 01       	movw	r18, r12
  f2:	99 01       	movw	r18, r18
  f4:	9c 01       	movw	r18, r24
  f6:	9f 01       	movw	r18, r30

000000f8 <__ctors_end>:
  f8:	11 24       	eor	r1, r1
  fa:	1f be       	out	0x3f, r1	; 63
  fc:	cf ef       	ldi	r28, 0xFF	; 255
  fe:	d1 e2       	ldi	r29, 0x21	; 33
 100:	de bf       	out	0x3e, r29	; 62
 102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_clear_bss>:
 104:	22 e0       	ldi	r18, 0x02	; 2
 106:	a6 e0       	ldi	r26, 0x06	; 6
 108:	b2 e0       	ldi	r27, 0x02	; 2
 10a:	01 c0       	rjmp	.+2      	; 0x10e <.do_clear_bss_start>

0000010c <.do_clear_bss_loop>:
 10c:	1d 92       	st	X+, r1

0000010e <.do_clear_bss_start>:
 10e:	ae 30       	cpi	r26, 0x0E	; 14
 110:	b2 07       	cpc	r27, r18
 112:	e1 f7       	brne	.-8      	; 0x10c <.do_clear_bss_loop>

00000114 <__do_copy_data>:
 114:	12 e0       	ldi	r17, 0x02	; 2
 116:	a0 e0       	ldi	r26, 0x00	; 0
 118:	b2 e0       	ldi	r27, 0x02	; 2
 11a:	ec ec       	ldi	r30, 0xCC	; 204
 11c:	fa e0       	ldi	r31, 0x0A	; 10
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	0b bf       	out	0x3b, r16	; 59
 122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
 124:	07 90       	elpm	r0, Z+
 126:	0d 92       	st	X+, r0
 128:	a6 30       	cpi	r26, 0x06	; 6
 12a:	b1 07       	cpc	r27, r17
 12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>
 12e:	3c d2       	rcall	.+1144   	; 0x5a8 <main>
 130:	cb c4       	rjmp	.+2454   	; 0xac8 <_exit>

00000132 <__bad_interrupt>:
 132:	66 cf       	rjmp	.-308    	; 0x0 <__vectors>

00000134 <printint_7_segment>:
/**
 * Printing function for integers
 */

void printint_7_segment(uint16_t value)
{
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <printint_7_segment+0xa>
 13e:	00 d0       	rcall	.+0      	; 0x140 <printint_7_segment+0xc>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	9c 83       	std	Y+4, r25	; 0x04
 146:	8b 83       	std	Y+3, r24	; 0x03
	currentSegment = 0;
 148:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <currentSegment>
	numberLength = 0;
 14c:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <numberLength>
	free(valueHex);
 150:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
 154:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <__data_end+0x1>
 158:	2e d4       	rcall	.+2140   	; 0x9b6 <free>
		
	valueHex = malloc(sizeof(uint8_t) * numberLength);
 15a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <numberLength>
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	91 d3       	rcall	.+1826   	; 0x886 <malloc>
 164:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x1>
 168:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>

	for (int i = 0; i<4; i++)
 16c:	1a 82       	std	Y+2, r1	; 0x02
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	42 c0       	rjmp	.+132    	; 0x1f6 <printint_7_segment+0xc2>
	{
		//convert each of the value's digit to HEX
		if (value <= 0)
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	9c 81       	ldd	r25, Y+4	; 0x04
 176:	89 2b       	or	r24, r25
 178:	09 f4       	brne	.+2      	; 0x17c <printint_7_segment+0x48>
 17a:	43 c0       	rjmp	.+134    	; 0x202 <printint_7_segment+0xce>
		break;
		valueHex[i] = digitToHex(value % 10);
 17c:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 180:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	89 01       	movw	r16, r18
 18a:	08 0f       	add	r16, r24
 18c:	19 1f       	adc	r17, r25
 18e:	4b 81       	ldd	r20, Y+3	; 0x03
 190:	5c 81       	ldd	r21, Y+4	; 0x04
 192:	9a 01       	movw	r18, r20
 194:	ad ec       	ldi	r26, 0xCD	; 205
 196:	bc ec       	ldi	r27, 0xCC	; 204
 198:	67 d3       	rcall	.+1742   	; 0x868 <__umulhisi3>
 19a:	96 95       	lsr	r25
 19c:	87 95       	ror	r24
 19e:	96 95       	lsr	r25
 1a0:	87 95       	ror	r24
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	9c 01       	movw	r18, r24
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	22 0f       	add	r18, r18
 1b2:	33 1f       	adc	r19, r19
 1b4:	82 0f       	add	r24, r18
 1b6:	93 1f       	adc	r25, r19
 1b8:	9a 01       	movw	r18, r20
 1ba:	28 1b       	sub	r18, r24
 1bc:	39 0b       	sbc	r19, r25
 1be:	c9 01       	movw	r24, r18
 1c0:	89 d0       	rcall	.+274    	; 0x2d4 <digitToHex>
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 83       	st	Z, r24
		value /= 10;
 1c6:	8b 81       	ldd	r24, Y+3	; 0x03
 1c8:	9c 81       	ldd	r25, Y+4	; 0x04
 1ca:	9c 01       	movw	r18, r24
 1cc:	ad ec       	ldi	r26, 0xCD	; 205
 1ce:	bc ec       	ldi	r27, 0xCC	; 204
 1d0:	4b d3       	rcall	.+1686   	; 0x868 <__umulhisi3>
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	9c 83       	std	Y+4, r25	; 0x04
 1e0:	8b 83       	std	Y+3, r24	; 0x03
		numberLength++;
 1e2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <numberLength>
 1e6:	8f 5f       	subi	r24, 0xFF	; 255
 1e8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <numberLength>
	numberLength = 0;
	free(valueHex);
		
	valueHex = malloc(sizeof(uint8_t) * numberLength);

	for (int i = 0; i<4; i++)
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	9a 83       	std	Y+2, r25	; 0x02
 1f4:	89 83       	std	Y+1, r24	; 0x01
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	9a 81       	ldd	r25, Y+2	; 0x02
 1fa:	04 97       	sbiw	r24, 0x04	; 4
 1fc:	0c f4       	brge	.+2      	; 0x200 <printint_7_segment+0xcc>
 1fe:	b9 cf       	rjmp	.-142    	; 0x172 <printint_7_segment+0x3e>
		break;
		valueHex[i] = digitToHex(value % 10);
		value /= 10;
		numberLength++;
	}
}
 200:	01 c0       	rjmp	.+2      	; 0x204 <printint_7_segment+0xd0>

	for (int i = 0; i<4; i++)
	{
		//convert each of the value's digit to HEX
		if (value <= 0)
		break;
 202:	00 00       	nop
		valueHex[i] = digitToHex(value % 10);
		value /= 10;
		numberLength++;
	}
}
 204:	00 00       	nop
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <display_7_segment>:
/**
 * Printing function for decimals
 */

void display_7_segment(float value, uint8_t no_of_decimals)
{
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	29 97       	sbiw	r28, 0x09	; 9
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	6d 83       	std	Y+5, r22	; 0x05
 22e:	7e 83       	std	Y+6, r23	; 0x06
 230:	8f 83       	std	Y+7, r24	; 0x07
 232:	98 87       	std	Y+8, r25	; 0x08
 234:	49 87       	std	Y+9, r20	; 0x09
	uint16_t valueInt;

	//convert float to int
	for (int i = 0; i<no_of_decimals; i++)
 236:	1a 82       	std	Y+2, r1	; 0x02
 238:	19 82       	std	Y+1, r1	; 0x01
 23a:	14 c0       	rjmp	.+40     	; 0x264 <display_7_segment+0x4c>
	{
		value = value * 10;
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	40 e2       	ldi	r20, 0x20	; 32
 242:	51 e4       	ldi	r21, 0x41	; 65
 244:	6d 81       	ldd	r22, Y+5	; 0x05
 246:	7e 81       	ldd	r23, Y+6	; 0x06
 248:	8f 81       	ldd	r24, Y+7	; 0x07
 24a:	98 85       	ldd	r25, Y+8	; 0x08
 24c:	a1 d2       	rcall	.+1346   	; 0x790 <__mulsf3>
 24e:	dc 01       	movw	r26, r24
 250:	cb 01       	movw	r24, r22
 252:	8d 83       	std	Y+5, r24	; 0x05
 254:	9e 83       	std	Y+6, r25	; 0x06
 256:	af 83       	std	Y+7, r26	; 0x07
 258:	b8 87       	std	Y+8, r27	; 0x08
void display_7_segment(float value, uint8_t no_of_decimals)
{
	uint16_t valueInt;

	//convert float to int
	for (int i = 0; i<no_of_decimals; i++)
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	9a 81       	ldd	r25, Y+2	; 0x02
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	9a 83       	std	Y+2, r25	; 0x02
 262:	89 83       	std	Y+1, r24	; 0x01
 264:	89 85       	ldd	r24, Y+9	; 0x09
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	9a 81       	ldd	r25, Y+2	; 0x02
 26e:	82 17       	cp	r24, r18
 270:	93 07       	cpc	r25, r19
 272:	24 f3       	brlt	.-56     	; 0x23c <display_7_segment+0x24>
	{
		value = value * 10;
	}
	
	//0.5 is added to the value because the value may not be represented exactly in binary
	valueInt = (int) (value + 0.5);
 274:	20 e0       	ldi	r18, 0x00	; 0
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	5f e3       	ldi	r21, 0x3F	; 63
 27c:	6d 81       	ldd	r22, Y+5	; 0x05
 27e:	7e 81       	ldd	r23, Y+6	; 0x06
 280:	8f 81       	ldd	r24, Y+7	; 0x07
 282:	98 85       	ldd	r25, Y+8	; 0x08
 284:	9f d1       	rcall	.+830    	; 0x5c4 <__addsf3>
 286:	dc 01       	movw	r26, r24
 288:	cb 01       	movw	r24, r22
 28a:	bc 01       	movw	r22, r24
 28c:	cd 01       	movw	r24, r26
 28e:	fe d1       	rcall	.+1020   	; 0x68c <__fixsfsi>
 290:	dc 01       	movw	r26, r24
 292:	cb 01       	movw	r24, r22
 294:	9c 83       	std	Y+4, r25	; 0x04
 296:	8b 83       	std	Y+3, r24	; 0x03
	
	printint_7_segment(valueInt);
 298:	8b 81       	ldd	r24, Y+3	; 0x03
 29a:	9c 81       	ldd	r25, Y+4	; 0x04
 29c:	4b df       	rcall	.-362    	; 0x134 <printint_7_segment>
 29e:	89 85       	ldd	r24, Y+9	; 0x09

	//set dp section to 1 if at least 1 decimal
	if (no_of_decimals > 0)
 2a0:	88 23       	and	r24, r24
 2a2:	71 f0       	breq	.+28     	; 0x2c0 <display_7_segment+0xa8>
 2a4:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
		valueHex[no_of_decimals]++;
 2a8:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 2ac:	89 85       	ldd	r24, Y+9	; 0x09
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	82 0f       	add	r24, r18
 2b4:	93 1f       	adc	r25, r19
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 81       	ld	r18, Z
 2ba:	2f 5f       	subi	r18, 0xFF	; 255
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
 2c0:	00 00       	nop
}
 2c2:	29 96       	adiw	r28, 0x09	; 9
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <digitToHex>:
 2d4:	cf 93       	push	r28
/**
 * For each digit to be represented, specific segments need to be lit up.
 */

uint8_t digitToHex(uint8_t digit)
{
 2d6:	df 93       	push	r29
 2d8:	00 d0       	rcall	.+0      	; 0x2da <digitToHex+0x6>
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t hexValue;
	switch (digit)
 2e0:	8a 81       	ldd	r24, Y+2	; 0x02
 2e2:	88 2f       	mov	r24, r24
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	09 2e       	mov	r0, r25
 2e8:	00 0c       	add	r0, r0
 2ea:	aa 0b       	sbc	r26, r26
 2ec:	bb 0b       	sbc	r27, r27
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	29 e0       	ldi	r18, 0x09	; 9
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	84 1b       	sub	r24, r20
 2f8:	95 0b       	sbc	r25, r21
 2fa:	28 17       	cp	r18, r24
 2fc:	39 07       	cpc	r19, r25
 2fe:	10 f1       	brcs	.+68     	; 0x344 <digitToHex+0x70>
 300:	8e 58       	subi	r24, 0x8E	; 142
 302:	9f 4f       	sbci	r25, 0xFF	; 255
 304:	fc 01       	movw	r30, r24
 306:	a7 c2       	rjmp	.+1358   	; 0x856 <__tablejump2__>
	{
		case 0: hexValue = 0xFC;
 308:	8c ef       	ldi	r24, 0xFC	; 252
 30a:	89 83       	std	Y+1, r24	; 0x01
		break;
 30c:	1e c0       	rjmp	.+60     	; 0x34a <digitToHex+0x76>
		case 1: hexValue = 0x60;
 30e:	80 e6       	ldi	r24, 0x60	; 96
 310:	89 83       	std	Y+1, r24	; 0x01
		break;
 312:	1b c0       	rjmp	.+54     	; 0x34a <digitToHex+0x76>
		case 2: hexValue = 0xDA;
 314:	8a ed       	ldi	r24, 0xDA	; 218
 316:	89 83       	std	Y+1, r24	; 0x01
		break;
 318:	18 c0       	rjmp	.+48     	; 0x34a <digitToHex+0x76>
		case 3: hexValue = 0xF2;
 31a:	82 ef       	ldi	r24, 0xF2	; 242
 31c:	89 83       	std	Y+1, r24	; 0x01
		break;
 31e:	15 c0       	rjmp	.+42     	; 0x34a <digitToHex+0x76>
		case 4: hexValue = 0x66;
 320:	86 e6       	ldi	r24, 0x66	; 102
 322:	89 83       	std	Y+1, r24	; 0x01
		break;
 324:	12 c0       	rjmp	.+36     	; 0x34a <digitToHex+0x76>
		case 5: hexValue = 0xB6;
 326:	86 eb       	ldi	r24, 0xB6	; 182
 328:	89 83       	std	Y+1, r24	; 0x01
		break;
 32a:	0f c0       	rjmp	.+30     	; 0x34a <digitToHex+0x76>
		case 6: hexValue = 0xBE;
 32c:	8e eb       	ldi	r24, 0xBE	; 190
 32e:	89 83       	std	Y+1, r24	; 0x01
		break;
 330:	0c c0       	rjmp	.+24     	; 0x34a <digitToHex+0x76>
		case 7: hexValue = 0xE0;
 332:	80 ee       	ldi	r24, 0xE0	; 224
 334:	89 83       	std	Y+1, r24	; 0x01
		break;
 336:	09 c0       	rjmp	.+18     	; 0x34a <digitToHex+0x76>
		case 8: hexValue = 0xFE;
 338:	8e ef       	ldi	r24, 0xFE	; 254
 33a:	89 83       	std	Y+1, r24	; 0x01
		break;
 33c:	06 c0       	rjmp	.+12     	; 0x34a <digitToHex+0x76>
		case 9: hexValue = 0xF6;
 33e:	86 ef       	ldi	r24, 0xF6	; 246
 340:	89 83       	std	Y+1, r24	; 0x01
		break;
 342:	03 c0       	rjmp	.+6      	; 0x34a <digitToHex+0x76>
		//set to 0 if undefined
		default: hexValue = 0xFC;
 344:	8c ef       	ldi	r24, 0xFC	; 252
 346:	89 83       	std	Y+1, r24	; 0x01
		break;
 348:	00 00       	nop
	}
	return hexValue;	
 34a:	89 81       	ldd	r24, Y+1	; 0x01
}
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret

00000356 <init_7_segment>:


void init_7_segment()
{
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
	//set SHCP(DDB1), DS(DDB2) and MR(DDB) as output
	DDRB |= _BV(DDB1) | _BV(DDB2) | _BV(DDB3);
 35e:	84 e2       	ldi	r24, 0x24	; 36
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	24 e2       	ldi	r18, 0x24	; 36
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	f9 01       	movw	r30, r18
 368:	20 81       	ld	r18, Z
 36a:	2e 60       	ori	r18, 0x0E	; 14
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18
	
	//set STCP as output
	DDRK |= _BV(DDK3);
 370:	87 e0       	ldi	r24, 0x07	; 7
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	27 e0       	ldi	r18, 0x07	; 7
 376:	31 e0       	ldi	r19, 0x01	; 1
 378:	f9 01       	movw	r30, r18
 37a:	20 81       	ld	r18, Z
 37c:	28 60       	ori	r18, 0x08	; 8
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
	
	//set MR to high as it is active low
	PORTB |= _BV(PB3);
 382:	85 e2       	ldi	r24, 0x25	; 37
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	25 e2       	ldi	r18, 0x25	; 37
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	f9 01       	movw	r30, r18
 38c:	20 81       	ld	r18, Z
 38e:	28 60       	ori	r18, 0x08	; 8
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
	
	//enable pull-ups
	DDRL = 0x0F;
 394:	8a e0       	ldi	r24, 0x0A	; 10
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	2f e0       	ldi	r18, 0x0F	; 15
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
	
	init_timer0();
 39e:	04 d0       	rcall	.+8      	; 0x3a8 <init_timer0>
}
 3a0:	00 00       	nop
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <init_timer0>:
/**
 * Compare register value was calculated using the forumla: OCR = (7372800 - (refresh rate * 2 * pre-scaler))/(refreshrate * 2 * pre-scaler)
 */

void init_timer0()
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
	TCCR4A = 0;
 3b0:	80 ea       	ldi	r24, 0xA0	; 160
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	fc 01       	movw	r30, r24
 3b6:	10 82       	st	Z, r1
	TCCR4B = 0;
 3b8:	81 ea       	ldi	r24, 0xA1	; 161
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	fc 01       	movw	r30, r24
 3be:	10 82       	st	Z, r1
 
	//initialize compare value
	//f = 360 hz
	//lower refresh rates are suitable as long as there are less than 4 segments lit up at the same time
	OCR4A=159;
 3c0:	88 ea       	ldi	r24, 0xA8	; 168
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	2f e9       	ldi	r18, 0x9F	; 159
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	fc 01       	movw	r30, r24
 3ca:	31 83       	std	Z+1, r19	; 0x01
 3cc:	20 83       	st	Z, r18
	
	//reset counter
	TCNT4=0;
 3ce:	84 ea       	ldi	r24, 0xA4	; 164
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	fc 01       	movw	r30, r24
 3d4:	11 82       	std	Z+1, r1	; 0x01
 3d6:	10 82       	st	Z, r1
 
	//pre-scaler to clk/64
	TCCR4B |= _BV(CS42);
 3d8:	81 ea       	ldi	r24, 0xA1	; 161
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	21 ea       	ldi	r18, 0xA1	; 161
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	f9 01       	movw	r30, r18
 3e2:	20 81       	ld	r18, Z
 3e4:	24 60       	ori	r18, 0x04	; 4
 3e6:	fc 01       	movw	r30, r24
 3e8:	20 83       	st	Z, r18
	TCCR4B &= ~(_BV(CS41));
 3ea:	81 ea       	ldi	r24, 0xA1	; 161
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	21 ea       	ldi	r18, 0xA1	; 161
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	f9 01       	movw	r30, r18
 3f4:	20 81       	ld	r18, Z
 3f6:	2d 7f       	andi	r18, 0xFD	; 253
 3f8:	fc 01       	movw	r30, r24
 3fa:	20 83       	st	Z, r18
	TCCR4B &= ~(_BV(CS40));
 3fc:	81 ea       	ldi	r24, 0xA1	; 161
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	21 ea       	ldi	r18, 0xA1	; 161
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	f9 01       	movw	r30, r18
 406:	20 81       	ld	r18, Z
 408:	2e 7f       	andi	r18, 0xFE	; 254
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
	
	//CTC mode
	TCCR4B |= _BV(WGM42);
 40e:	81 ea       	ldi	r24, 0xA1	; 161
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	21 ea       	ldi	r18, 0xA1	; 161
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	f9 01       	movw	r30, r18
 418:	20 81       	ld	r18, Z
 41a:	28 60       	ori	r18, 0x08	; 8
 41c:	fc 01       	movw	r30, r24
 41e:	20 83       	st	Z, r18

	//enable compare interrupt
	TIMSK4 |= _BV(OCIE4A);
 420:	82 e7       	ldi	r24, 0x72	; 114
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	22 e7       	ldi	r18, 0x72	; 114
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	f9 01       	movw	r30, r18
 42a:	20 81       	ld	r18, Z
 42c:	22 60       	ori	r18, 0x02	; 2
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
}
 432:	00 00       	nop
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 44a:	0f 92       	push	r0
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	8f 93       	push	r24
 458:	9f 93       	push	r25
 45a:	ef 93       	push	r30
 45c:	ff 93       	push	r31
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	00 d0       	rcall	.+0      	; 0x464 <__vector_42+0x2a>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	//clear global interrupt
	cli();
 468:	f8 94       	cli
	
	//push to storage register
	for (int j = 0; j<8; j++)
 46a:	1a 82       	std	Y+2, r1	; 0x02
 46c:	19 82       	std	Y+1, r1	; 0x01
 46e:	42 c0       	rjmp	.+132    	; 0x4f4 <__vector_42+0xba>
	{
		//load MSB firsts
		if ((valueHex[currentSegment] >> j) & 1)
 470:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__data_end>
 474:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <__data_end+0x1>
 478:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <currentSegment>
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	82 0f       	add	r24, r18
 482:	93 1f       	adc	r25, r19
 484:	fc 01       	movw	r30, r24
 486:	80 81       	ld	r24, Z
 488:	88 2f       	mov	r24, r24
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	09 80       	ldd	r0, Y+1	; 0x01
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__vector_42+0x5a>
 490:	95 95       	asr	r25
 492:	87 95       	ror	r24
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <__vector_42+0x56>
 498:	81 70       	andi	r24, 0x01	; 1
 49a:	99 27       	eor	r25, r25
 49c:	89 2b       	or	r24, r25
 49e:	51 f0       	breq	.+20     	; 0x4b4 <__vector_42+0x7a>
			PORTB |= _BV(PB2);
 4a0:	85 e2       	ldi	r24, 0x25	; 37
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	25 e2       	ldi	r18, 0x25	; 37
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	f9 01       	movw	r30, r18
 4aa:	20 81       	ld	r18, Z
 4ac:	24 60       	ori	r18, 0x04	; 4
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
 4b2:	09 c0       	rjmp	.+18     	; 0x4c6 <__vector_42+0x8c>
		else
			PORTB &= ~(_BV(PB2));
 4b4:	85 e2       	ldi	r24, 0x25	; 37
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	25 e2       	ldi	r18, 0x25	; 37
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	f9 01       	movw	r30, r18
 4be:	20 81       	ld	r18, Z
 4c0:	2b 7f       	andi	r18, 0xFB	; 251
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 83       	st	Z, r18
		
		//set SHCP to high
		PORTB |= _BV(PB1);
 4c6:	85 e2       	ldi	r24, 0x25	; 37
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	25 e2       	ldi	r18, 0x25	; 37
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	f9 01       	movw	r30, r18
 4d0:	20 81       	ld	r18, Z
 4d2:	22 60       	ori	r18, 0x02	; 2
 4d4:	fc 01       	movw	r30, r24
 4d6:	20 83       	st	Z, r18
		
		//set SHCP to low
		PORTB &= ~(_BV(PB1));
 4d8:	85 e2       	ldi	r24, 0x25	; 37
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	25 e2       	ldi	r18, 0x25	; 37
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	f9 01       	movw	r30, r18
 4e2:	20 81       	ld	r18, Z
 4e4:	2d 7f       	andi	r18, 0xFD	; 253
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18
{
	//clear global interrupt
	cli();
	
	//push to storage register
	for (int j = 0; j<8; j++)
 4ea:	89 81       	ldd	r24, Y+1	; 0x01
 4ec:	9a 81       	ldd	r25, Y+2	; 0x02
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	9a 83       	std	Y+2, r25	; 0x02
 4f2:	89 83       	std	Y+1, r24	; 0x01
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	9a 81       	ldd	r25, Y+2	; 0x02
 4f8:	08 97       	sbiw	r24, 0x08	; 8
 4fa:	0c f4       	brge	.+2      	; 0x4fe <__vector_42+0xc4>
 4fc:	b9 cf       	rjmp	.-142    	; 0x470 <__vector_42+0x36>
		//set SHCP to low
		PORTB &= ~(_BV(PB1));
	}

	//clear all the displaying segments then light-up the segment on the current position
	PORTL &= ~(_BV(PL0) | _BV(PL1) | _BV(PL2) | _BV(PL3));
 4fe:	8b e0       	ldi	r24, 0x0B	; 11
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	2b e0       	ldi	r18, 0x0B	; 11
 504:	31 e0       	ldi	r19, 0x01	; 1
 506:	f9 01       	movw	r30, r18
 508:	20 81       	ld	r18, Z
 50a:	20 7f       	andi	r18, 0xF0	; 240
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
	
	//select which segment the byte will be displayed on
	PORTL |= _BV(currentSegment);
 510:	8b e0       	ldi	r24, 0x0B	; 11
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	2b e0       	ldi	r18, 0x0B	; 11
 516:	31 e0       	ldi	r19, 0x01	; 1
 518:	f9 01       	movw	r30, r18
 51a:	20 81       	ld	r18, Z
 51c:	62 2f       	mov	r22, r18
 51e:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <currentSegment>
 522:	42 2f       	mov	r20, r18
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	21 e0       	ldi	r18, 0x01	; 1
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <__vector_42+0xf6>
 52c:	22 0f       	add	r18, r18
 52e:	33 1f       	adc	r19, r19
 530:	4a 95       	dec	r20
 532:	e2 f7       	brpl	.-8      	; 0x52c <__vector_42+0xf2>
 534:	26 2b       	or	r18, r22
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18
	
	//shift byte to display
	//set latch high
	PORTK |= _BV(PK3);
 53a:	88 e0       	ldi	r24, 0x08	; 8
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	28 e0       	ldi	r18, 0x08	; 8
 540:	31 e0       	ldi	r19, 0x01	; 1
 542:	f9 01       	movw	r30, r18
 544:	20 81       	ld	r18, Z
 546:	28 60       	ori	r18, 0x08	; 8
 548:	fc 01       	movw	r30, r24
 54a:	20 83       	st	Z, r18
	
	//set latch low
	PORTK &= ~(_BV(PK3));
 54c:	88 e0       	ldi	r24, 0x08	; 8
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	28 e0       	ldi	r18, 0x08	; 8
 552:	31 e0       	ldi	r19, 0x01	; 1
 554:	f9 01       	movw	r30, r18
 556:	20 81       	ld	r18, Z
 558:	27 7f       	andi	r18, 0xF7	; 247
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
	
	//move to next segment
	currentSegment++;
 55e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <currentSegment>
 562:	8f 5f       	subi	r24, 0xFF	; 255
 564:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <currentSegment>
	
	//reset segment position once the last digit is printed
	if (currentSegment == numberLength)
 568:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <currentSegment>
 56c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <numberLength>
 570:	98 17       	cp	r25, r24
 572:	11 f4       	brne	.+4      	; 0x578 <__vector_42+0x13e>
		currentSegment = 0;
 574:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <currentSegment>
		
	//enable global interrupt
	sei();
 578:	78 94       	sei
 57a:	00 00       	nop
 57c:	0f 90       	pop	r0
 57e:	0f 90       	pop	r0
 580:	df 91       	pop	r29
 582:	cf 91       	pop	r28
 584:	ff 91       	pop	r31
 586:	ef 91       	pop	r30
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	6f 91       	pop	r22
 58e:	5f 91       	pop	r21
 590:	4f 91       	pop	r20
 592:	3f 91       	pop	r19
 594:	2f 91       	pop	r18
 596:	0f 90       	pop	r0
 598:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 59c:	0f 90       	pop	r0
 59e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <main>:
#include "util/delay.h"
#include "driver_7segment.h"
#include <avr/interrupt.h>

int main(void)
{
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
	//initialize peripherals
	init_7_segment();
 5b0:	d2 de       	rcall	.-604    	; 0x356 <init_7_segment>
	
	
	display_7_segment(40.05, 2);
 5b2:	42 e0       	ldi	r20, 0x02	; 2
 5b4:	63 e3       	ldi	r22, 0x33	; 51
 5b6:	73 e3       	ldi	r23, 0x33	; 51
 5b8:	80 e2       	ldi	r24, 0x20	; 32
 5ba:	92 e4       	ldi	r25, 0x42	; 66
 5bc:	2d de       	rcall	.-934    	; 0x218 <display_7_segment>
	//printint_7_segment(1);
	//set Global Interrupt in SREG
	sei();
 5be:	78 94       	sei
		//
		//display_7_segment(1.5, 0);
		//sei();
		//_delay_ms(5000);
		//cli();
	}
 5c0:	ff cf       	rjmp	.-2      	; 0x5c0 <main+0x18>

000005c2 <__subsf3>:
 5c2:	50 58       	subi	r21, 0x80	; 128

000005c4 <__addsf3>:
 5c4:	bb 27       	eor	r27, r27
 5c6:	aa 27       	eor	r26, r26
 5c8:	0e d0       	rcall	.+28     	; 0x5e6 <__addsf3x>
 5ca:	a8 c0       	rjmp	.+336    	; 0x71c <__fp_round>
 5cc:	99 d0       	rcall	.+306    	; 0x700 <__fp_pscA>
 5ce:	30 f0       	brcs	.+12     	; 0x5dc <__addsf3+0x18>
 5d0:	9e d0       	rcall	.+316    	; 0x70e <__fp_pscB>
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__addsf3+0x18>
 5d4:	31 f4       	brne	.+12     	; 0x5e2 <__addsf3+0x1e>
 5d6:	9f 3f       	cpi	r25, 0xFF	; 255
 5d8:	11 f4       	brne	.+4      	; 0x5de <__addsf3+0x1a>
 5da:	1e f4       	brtc	.+6      	; 0x5e2 <__addsf3+0x1e>
 5dc:	8e c0       	rjmp	.+284    	; 0x6fa <__fp_nan>
 5de:	0e f4       	brtc	.+2      	; 0x5e2 <__addsf3+0x1e>
 5e0:	e0 95       	com	r30
 5e2:	e7 fb       	bst	r30, 7
 5e4:	84 c0       	rjmp	.+264    	; 0x6ee <__fp_inf>

000005e6 <__addsf3x>:
 5e6:	e9 2f       	mov	r30, r25
 5e8:	aa d0       	rcall	.+340    	; 0x73e <__fp_split3>
 5ea:	80 f3       	brcs	.-32     	; 0x5cc <__addsf3+0x8>
 5ec:	ba 17       	cp	r27, r26
 5ee:	62 07       	cpc	r22, r18
 5f0:	73 07       	cpc	r23, r19
 5f2:	84 07       	cpc	r24, r20
 5f4:	95 07       	cpc	r25, r21
 5f6:	18 f0       	brcs	.+6      	; 0x5fe <__addsf3x+0x18>
 5f8:	71 f4       	brne	.+28     	; 0x616 <__addsf3x+0x30>
 5fa:	9e f5       	brtc	.+102    	; 0x662 <__addsf3x+0x7c>
 5fc:	c2 c0       	rjmp	.+388    	; 0x782 <__fp_zero>
 5fe:	0e f4       	brtc	.+2      	; 0x602 <__addsf3x+0x1c>
 600:	e0 95       	com	r30
 602:	0b 2e       	mov	r0, r27
 604:	ba 2f       	mov	r27, r26
 606:	a0 2d       	mov	r26, r0
 608:	0b 01       	movw	r0, r22
 60a:	b9 01       	movw	r22, r18
 60c:	90 01       	movw	r18, r0
 60e:	0c 01       	movw	r0, r24
 610:	ca 01       	movw	r24, r20
 612:	a0 01       	movw	r20, r0
 614:	11 24       	eor	r1, r1
 616:	ff 27       	eor	r31, r31
 618:	59 1b       	sub	r21, r25
 61a:	99 f0       	breq	.+38     	; 0x642 <__addsf3x+0x5c>
 61c:	59 3f       	cpi	r21, 0xF9	; 249
 61e:	50 f4       	brcc	.+20     	; 0x634 <__addsf3x+0x4e>
 620:	50 3e       	cpi	r21, 0xE0	; 224
 622:	68 f1       	brcs	.+90     	; 0x67e <__addsf3x+0x98>
 624:	1a 16       	cp	r1, r26
 626:	f0 40       	sbci	r31, 0x00	; 0
 628:	a2 2f       	mov	r26, r18
 62a:	23 2f       	mov	r18, r19
 62c:	34 2f       	mov	r19, r20
 62e:	44 27       	eor	r20, r20
 630:	58 5f       	subi	r21, 0xF8	; 248
 632:	f3 cf       	rjmp	.-26     	; 0x61a <__addsf3x+0x34>
 634:	46 95       	lsr	r20
 636:	37 95       	ror	r19
 638:	27 95       	ror	r18
 63a:	a7 95       	ror	r26
 63c:	f0 40       	sbci	r31, 0x00	; 0
 63e:	53 95       	inc	r21
 640:	c9 f7       	brne	.-14     	; 0x634 <__addsf3x+0x4e>
 642:	7e f4       	brtc	.+30     	; 0x662 <__addsf3x+0x7c>
 644:	1f 16       	cp	r1, r31
 646:	ba 0b       	sbc	r27, r26
 648:	62 0b       	sbc	r22, r18
 64a:	73 0b       	sbc	r23, r19
 64c:	84 0b       	sbc	r24, r20
 64e:	ba f0       	brmi	.+46     	; 0x67e <__addsf3x+0x98>
 650:	91 50       	subi	r25, 0x01	; 1
 652:	a1 f0       	breq	.+40     	; 0x67c <__addsf3x+0x96>
 654:	ff 0f       	add	r31, r31
 656:	bb 1f       	adc	r27, r27
 658:	66 1f       	adc	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	88 1f       	adc	r24, r24
 65e:	c2 f7       	brpl	.-16     	; 0x650 <__addsf3x+0x6a>
 660:	0e c0       	rjmp	.+28     	; 0x67e <__addsf3x+0x98>
 662:	ba 0f       	add	r27, r26
 664:	62 1f       	adc	r22, r18
 666:	73 1f       	adc	r23, r19
 668:	84 1f       	adc	r24, r20
 66a:	48 f4       	brcc	.+18     	; 0x67e <__addsf3x+0x98>
 66c:	87 95       	ror	r24
 66e:	77 95       	ror	r23
 670:	67 95       	ror	r22
 672:	b7 95       	ror	r27
 674:	f7 95       	ror	r31
 676:	9e 3f       	cpi	r25, 0xFE	; 254
 678:	08 f0       	brcs	.+2      	; 0x67c <__addsf3x+0x96>
 67a:	b3 cf       	rjmp	.-154    	; 0x5e2 <__addsf3+0x1e>
 67c:	93 95       	inc	r25
 67e:	88 0f       	add	r24, r24
 680:	08 f0       	brcs	.+2      	; 0x684 <__addsf3x+0x9e>
 682:	99 27       	eor	r25, r25
 684:	ee 0f       	add	r30, r30
 686:	97 95       	ror	r25
 688:	87 95       	ror	r24
 68a:	08 95       	ret

0000068c <__fixsfsi>:
 68c:	04 d0       	rcall	.+8      	; 0x696 <__fixunssfsi>
 68e:	68 94       	set
 690:	b1 11       	cpse	r27, r1
 692:	78 c0       	rjmp	.+240    	; 0x784 <__fp_szero>
 694:	08 95       	ret

00000696 <__fixunssfsi>:
 696:	5b d0       	rcall	.+182    	; 0x74e <__fp_splitA>
 698:	88 f0       	brcs	.+34     	; 0x6bc <__fixunssfsi+0x26>
 69a:	9f 57       	subi	r25, 0x7F	; 127
 69c:	90 f0       	brcs	.+36     	; 0x6c2 <__fixunssfsi+0x2c>
 69e:	b9 2f       	mov	r27, r25
 6a0:	99 27       	eor	r25, r25
 6a2:	b7 51       	subi	r27, 0x17	; 23
 6a4:	a0 f0       	brcs	.+40     	; 0x6ce <__fixunssfsi+0x38>
 6a6:	d1 f0       	breq	.+52     	; 0x6dc <__fixunssfsi+0x46>
 6a8:	66 0f       	add	r22, r22
 6aa:	77 1f       	adc	r23, r23
 6ac:	88 1f       	adc	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	1a f0       	brmi	.+6      	; 0x6b8 <__fixunssfsi+0x22>
 6b2:	ba 95       	dec	r27
 6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__fixunssfsi+0x12>
 6b6:	12 c0       	rjmp	.+36     	; 0x6dc <__fixunssfsi+0x46>
 6b8:	b1 30       	cpi	r27, 0x01	; 1
 6ba:	81 f0       	breq	.+32     	; 0x6dc <__fixunssfsi+0x46>
 6bc:	62 d0       	rcall	.+196    	; 0x782 <__fp_zero>
 6be:	b1 e0       	ldi	r27, 0x01	; 1
 6c0:	08 95       	ret
 6c2:	5f c0       	rjmp	.+190    	; 0x782 <__fp_zero>
 6c4:	67 2f       	mov	r22, r23
 6c6:	78 2f       	mov	r23, r24
 6c8:	88 27       	eor	r24, r24
 6ca:	b8 5f       	subi	r27, 0xF8	; 248
 6cc:	39 f0       	breq	.+14     	; 0x6dc <__fixunssfsi+0x46>
 6ce:	b9 3f       	cpi	r27, 0xF9	; 249
 6d0:	cc f3       	brlt	.-14     	; 0x6c4 <__fixunssfsi+0x2e>
 6d2:	86 95       	lsr	r24
 6d4:	77 95       	ror	r23
 6d6:	67 95       	ror	r22
 6d8:	b3 95       	inc	r27
 6da:	d9 f7       	brne	.-10     	; 0x6d2 <__fixunssfsi+0x3c>
 6dc:	3e f4       	brtc	.+14     	; 0x6ec <__fixunssfsi+0x56>
 6de:	90 95       	com	r25
 6e0:	80 95       	com	r24
 6e2:	70 95       	com	r23
 6e4:	61 95       	neg	r22
 6e6:	7f 4f       	sbci	r23, 0xFF	; 255
 6e8:	8f 4f       	sbci	r24, 0xFF	; 255
 6ea:	9f 4f       	sbci	r25, 0xFF	; 255
 6ec:	08 95       	ret

000006ee <__fp_inf>:
 6ee:	97 f9       	bld	r25, 7
 6f0:	9f 67       	ori	r25, 0x7F	; 127
 6f2:	80 e8       	ldi	r24, 0x80	; 128
 6f4:	70 e0       	ldi	r23, 0x00	; 0
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	08 95       	ret

000006fa <__fp_nan>:
 6fa:	9f ef       	ldi	r25, 0xFF	; 255
 6fc:	80 ec       	ldi	r24, 0xC0	; 192
 6fe:	08 95       	ret

00000700 <__fp_pscA>:
 700:	00 24       	eor	r0, r0
 702:	0a 94       	dec	r0
 704:	16 16       	cp	r1, r22
 706:	17 06       	cpc	r1, r23
 708:	18 06       	cpc	r1, r24
 70a:	09 06       	cpc	r0, r25
 70c:	08 95       	ret

0000070e <__fp_pscB>:
 70e:	00 24       	eor	r0, r0
 710:	0a 94       	dec	r0
 712:	12 16       	cp	r1, r18
 714:	13 06       	cpc	r1, r19
 716:	14 06       	cpc	r1, r20
 718:	05 06       	cpc	r0, r21
 71a:	08 95       	ret

0000071c <__fp_round>:
 71c:	09 2e       	mov	r0, r25
 71e:	03 94       	inc	r0
 720:	00 0c       	add	r0, r0
 722:	11 f4       	brne	.+4      	; 0x728 <__fp_round+0xc>
 724:	88 23       	and	r24, r24
 726:	52 f0       	brmi	.+20     	; 0x73c <__fp_round+0x20>
 728:	bb 0f       	add	r27, r27
 72a:	40 f4       	brcc	.+16     	; 0x73c <__fp_round+0x20>
 72c:	bf 2b       	or	r27, r31
 72e:	11 f4       	brne	.+4      	; 0x734 <__fp_round+0x18>
 730:	60 ff       	sbrs	r22, 0
 732:	04 c0       	rjmp	.+8      	; 0x73c <__fp_round+0x20>
 734:	6f 5f       	subi	r22, 0xFF	; 255
 736:	7f 4f       	sbci	r23, 0xFF	; 255
 738:	8f 4f       	sbci	r24, 0xFF	; 255
 73a:	9f 4f       	sbci	r25, 0xFF	; 255
 73c:	08 95       	ret

0000073e <__fp_split3>:
 73e:	57 fd       	sbrc	r21, 7
 740:	90 58       	subi	r25, 0x80	; 128
 742:	44 0f       	add	r20, r20
 744:	55 1f       	adc	r21, r21
 746:	59 f0       	breq	.+22     	; 0x75e <__fp_splitA+0x10>
 748:	5f 3f       	cpi	r21, 0xFF	; 255
 74a:	71 f0       	breq	.+28     	; 0x768 <__fp_splitA+0x1a>
 74c:	47 95       	ror	r20

0000074e <__fp_splitA>:
 74e:	88 0f       	add	r24, r24
 750:	97 fb       	bst	r25, 7
 752:	99 1f       	adc	r25, r25
 754:	61 f0       	breq	.+24     	; 0x76e <__fp_splitA+0x20>
 756:	9f 3f       	cpi	r25, 0xFF	; 255
 758:	79 f0       	breq	.+30     	; 0x778 <__fp_splitA+0x2a>
 75a:	87 95       	ror	r24
 75c:	08 95       	ret
 75e:	12 16       	cp	r1, r18
 760:	13 06       	cpc	r1, r19
 762:	14 06       	cpc	r1, r20
 764:	55 1f       	adc	r21, r21
 766:	f2 cf       	rjmp	.-28     	; 0x74c <__fp_split3+0xe>
 768:	46 95       	lsr	r20
 76a:	f1 df       	rcall	.-30     	; 0x74e <__fp_splitA>
 76c:	08 c0       	rjmp	.+16     	; 0x77e <__fp_splitA+0x30>
 76e:	16 16       	cp	r1, r22
 770:	17 06       	cpc	r1, r23
 772:	18 06       	cpc	r1, r24
 774:	99 1f       	adc	r25, r25
 776:	f1 cf       	rjmp	.-30     	; 0x75a <__fp_splitA+0xc>
 778:	86 95       	lsr	r24
 77a:	71 05       	cpc	r23, r1
 77c:	61 05       	cpc	r22, r1
 77e:	08 94       	sec
 780:	08 95       	ret

00000782 <__fp_zero>:
 782:	e8 94       	clt

00000784 <__fp_szero>:
 784:	bb 27       	eor	r27, r27
 786:	66 27       	eor	r22, r22
 788:	77 27       	eor	r23, r23
 78a:	cb 01       	movw	r24, r22
 78c:	97 f9       	bld	r25, 7
 78e:	08 95       	ret

00000790 <__mulsf3>:
 790:	0b d0       	rcall	.+22     	; 0x7a8 <__mulsf3x>
 792:	c4 cf       	rjmp	.-120    	; 0x71c <__fp_round>
 794:	b5 df       	rcall	.-150    	; 0x700 <__fp_pscA>
 796:	28 f0       	brcs	.+10     	; 0x7a2 <__mulsf3+0x12>
 798:	ba df       	rcall	.-140    	; 0x70e <__fp_pscB>
 79a:	18 f0       	brcs	.+6      	; 0x7a2 <__mulsf3+0x12>
 79c:	95 23       	and	r25, r21
 79e:	09 f0       	breq	.+2      	; 0x7a2 <__mulsf3+0x12>
 7a0:	a6 cf       	rjmp	.-180    	; 0x6ee <__fp_inf>
 7a2:	ab cf       	rjmp	.-170    	; 0x6fa <__fp_nan>
 7a4:	11 24       	eor	r1, r1
 7a6:	ee cf       	rjmp	.-36     	; 0x784 <__fp_szero>

000007a8 <__mulsf3x>:
 7a8:	ca df       	rcall	.-108    	; 0x73e <__fp_split3>
 7aa:	a0 f3       	brcs	.-24     	; 0x794 <__mulsf3+0x4>

000007ac <__mulsf3_pse>:
 7ac:	95 9f       	mul	r25, r21
 7ae:	d1 f3       	breq	.-12     	; 0x7a4 <__mulsf3+0x14>
 7b0:	95 0f       	add	r25, r21
 7b2:	50 e0       	ldi	r21, 0x00	; 0
 7b4:	55 1f       	adc	r21, r21
 7b6:	62 9f       	mul	r22, r18
 7b8:	f0 01       	movw	r30, r0
 7ba:	72 9f       	mul	r23, r18
 7bc:	bb 27       	eor	r27, r27
 7be:	f0 0d       	add	r31, r0
 7c0:	b1 1d       	adc	r27, r1
 7c2:	63 9f       	mul	r22, r19
 7c4:	aa 27       	eor	r26, r26
 7c6:	f0 0d       	add	r31, r0
 7c8:	b1 1d       	adc	r27, r1
 7ca:	aa 1f       	adc	r26, r26
 7cc:	64 9f       	mul	r22, r20
 7ce:	66 27       	eor	r22, r22
 7d0:	b0 0d       	add	r27, r0
 7d2:	a1 1d       	adc	r26, r1
 7d4:	66 1f       	adc	r22, r22
 7d6:	82 9f       	mul	r24, r18
 7d8:	22 27       	eor	r18, r18
 7da:	b0 0d       	add	r27, r0
 7dc:	a1 1d       	adc	r26, r1
 7de:	62 1f       	adc	r22, r18
 7e0:	73 9f       	mul	r23, r19
 7e2:	b0 0d       	add	r27, r0
 7e4:	a1 1d       	adc	r26, r1
 7e6:	62 1f       	adc	r22, r18
 7e8:	83 9f       	mul	r24, r19
 7ea:	a0 0d       	add	r26, r0
 7ec:	61 1d       	adc	r22, r1
 7ee:	22 1f       	adc	r18, r18
 7f0:	74 9f       	mul	r23, r20
 7f2:	33 27       	eor	r19, r19
 7f4:	a0 0d       	add	r26, r0
 7f6:	61 1d       	adc	r22, r1
 7f8:	23 1f       	adc	r18, r19
 7fa:	84 9f       	mul	r24, r20
 7fc:	60 0d       	add	r22, r0
 7fe:	21 1d       	adc	r18, r1
 800:	82 2f       	mov	r24, r18
 802:	76 2f       	mov	r23, r22
 804:	6a 2f       	mov	r22, r26
 806:	11 24       	eor	r1, r1
 808:	9f 57       	subi	r25, 0x7F	; 127
 80a:	50 40       	sbci	r21, 0x00	; 0
 80c:	8a f0       	brmi	.+34     	; 0x830 <__mulsf3_pse+0x84>
 80e:	e1 f0       	breq	.+56     	; 0x848 <__mulsf3_pse+0x9c>
 810:	88 23       	and	r24, r24
 812:	4a f0       	brmi	.+18     	; 0x826 <__mulsf3_pse+0x7a>
 814:	ee 0f       	add	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	bb 1f       	adc	r27, r27
 81a:	66 1f       	adc	r22, r22
 81c:	77 1f       	adc	r23, r23
 81e:	88 1f       	adc	r24, r24
 820:	91 50       	subi	r25, 0x01	; 1
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	a9 f7       	brne	.-22     	; 0x810 <__mulsf3_pse+0x64>
 826:	9e 3f       	cpi	r25, 0xFE	; 254
 828:	51 05       	cpc	r21, r1
 82a:	70 f0       	brcs	.+28     	; 0x848 <__mulsf3_pse+0x9c>
 82c:	60 cf       	rjmp	.-320    	; 0x6ee <__fp_inf>
 82e:	aa cf       	rjmp	.-172    	; 0x784 <__fp_szero>
 830:	5f 3f       	cpi	r21, 0xFF	; 255
 832:	ec f3       	brlt	.-6      	; 0x82e <__mulsf3_pse+0x82>
 834:	98 3e       	cpi	r25, 0xE8	; 232
 836:	dc f3       	brlt	.-10     	; 0x82e <__mulsf3_pse+0x82>
 838:	86 95       	lsr	r24
 83a:	77 95       	ror	r23
 83c:	67 95       	ror	r22
 83e:	b7 95       	ror	r27
 840:	f7 95       	ror	r31
 842:	e7 95       	ror	r30
 844:	9f 5f       	subi	r25, 0xFF	; 255
 846:	c1 f7       	brne	.-16     	; 0x838 <__mulsf3_pse+0x8c>
 848:	fe 2b       	or	r31, r30
 84a:	88 0f       	add	r24, r24
 84c:	91 1d       	adc	r25, r1
 84e:	96 95       	lsr	r25
 850:	87 95       	ror	r24
 852:	97 f9       	bld	r25, 7
 854:	08 95       	ret

00000856 <__tablejump2__>:
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	00 24       	eor	r0, r0
 85c:	00 1c       	adc	r0, r0
 85e:	0b be       	out	0x3b, r0	; 59
 860:	07 90       	elpm	r0, Z+
 862:	f6 91       	elpm	r31, Z
 864:	e0 2d       	mov	r30, r0
 866:	09 94       	ijmp

00000868 <__umulhisi3>:
 868:	a2 9f       	mul	r26, r18
 86a:	b0 01       	movw	r22, r0
 86c:	b3 9f       	mul	r27, r19
 86e:	c0 01       	movw	r24, r0
 870:	a3 9f       	mul	r26, r19
 872:	70 0d       	add	r23, r0
 874:	81 1d       	adc	r24, r1
 876:	11 24       	eor	r1, r1
 878:	91 1d       	adc	r25, r1
 87a:	b2 9f       	mul	r27, r18
 87c:	70 0d       	add	r23, r0
 87e:	81 1d       	adc	r24, r1
 880:	11 24       	eor	r1, r1
 882:	91 1d       	adc	r25, r1
 884:	08 95       	ret

00000886 <malloc>:
 886:	0f 93       	push	r16
 888:	1f 93       	push	r17
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	82 30       	cpi	r24, 0x02	; 2
 890:	91 05       	cpc	r25, r1
 892:	10 f4       	brcc	.+4      	; 0x898 <malloc+0x12>
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__flp>
 89c:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__flp+0x1>
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	a0 e0       	ldi	r26, 0x00	; 0
 8a6:	b0 e0       	ldi	r27, 0x00	; 0
 8a8:	30 97       	sbiw	r30, 0x00	; 0
 8aa:	19 f1       	breq	.+70     	; 0x8f2 <malloc+0x6c>
 8ac:	40 81       	ld	r20, Z
 8ae:	51 81       	ldd	r21, Z+1	; 0x01
 8b0:	02 81       	ldd	r16, Z+2	; 0x02
 8b2:	13 81       	ldd	r17, Z+3	; 0x03
 8b4:	48 17       	cp	r20, r24
 8b6:	59 07       	cpc	r21, r25
 8b8:	c8 f0       	brcs	.+50     	; 0x8ec <malloc+0x66>
 8ba:	84 17       	cp	r24, r20
 8bc:	95 07       	cpc	r25, r21
 8be:	69 f4       	brne	.+26     	; 0x8da <malloc+0x54>
 8c0:	10 97       	sbiw	r26, 0x00	; 0
 8c2:	31 f0       	breq	.+12     	; 0x8d0 <malloc+0x4a>
 8c4:	12 96       	adiw	r26, 0x02	; 2
 8c6:	0c 93       	st	X, r16
 8c8:	12 97       	sbiw	r26, 0x02	; 2
 8ca:	13 96       	adiw	r26, 0x03	; 3
 8cc:	1c 93       	st	X, r17
 8ce:	27 c0       	rjmp	.+78     	; 0x91e <malloc+0x98>
 8d0:	00 93 0c 02 	sts	0x020C, r16	; 0x80020c <__flp>
 8d4:	10 93 0d 02 	sts	0x020D, r17	; 0x80020d <__flp+0x1>
 8d8:	22 c0       	rjmp	.+68     	; 0x91e <malloc+0x98>
 8da:	21 15       	cp	r18, r1
 8dc:	31 05       	cpc	r19, r1
 8de:	19 f0       	breq	.+6      	; 0x8e6 <malloc+0x60>
 8e0:	42 17       	cp	r20, r18
 8e2:	53 07       	cpc	r21, r19
 8e4:	18 f4       	brcc	.+6      	; 0x8ec <malloc+0x66>
 8e6:	9a 01       	movw	r18, r20
 8e8:	bd 01       	movw	r22, r26
 8ea:	ef 01       	movw	r28, r30
 8ec:	df 01       	movw	r26, r30
 8ee:	f8 01       	movw	r30, r16
 8f0:	db cf       	rjmp	.-74     	; 0x8a8 <malloc+0x22>
 8f2:	21 15       	cp	r18, r1
 8f4:	31 05       	cpc	r19, r1
 8f6:	f9 f0       	breq	.+62     	; 0x936 <malloc+0xb0>
 8f8:	28 1b       	sub	r18, r24
 8fa:	39 0b       	sbc	r19, r25
 8fc:	24 30       	cpi	r18, 0x04	; 4
 8fe:	31 05       	cpc	r19, r1
 900:	80 f4       	brcc	.+32     	; 0x922 <malloc+0x9c>
 902:	8a 81       	ldd	r24, Y+2	; 0x02
 904:	9b 81       	ldd	r25, Y+3	; 0x03
 906:	61 15       	cp	r22, r1
 908:	71 05       	cpc	r23, r1
 90a:	21 f0       	breq	.+8      	; 0x914 <malloc+0x8e>
 90c:	fb 01       	movw	r30, r22
 90e:	93 83       	std	Z+3, r25	; 0x03
 910:	82 83       	std	Z+2, r24	; 0x02
 912:	04 c0       	rjmp	.+8      	; 0x91c <malloc+0x96>
 914:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__flp+0x1>
 918:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__flp>
 91c:	fe 01       	movw	r30, r28
 91e:	32 96       	adiw	r30, 0x02	; 2
 920:	44 c0       	rjmp	.+136    	; 0x9aa <malloc+0x124>
 922:	fe 01       	movw	r30, r28
 924:	e2 0f       	add	r30, r18
 926:	f3 1f       	adc	r31, r19
 928:	81 93       	st	Z+, r24
 92a:	91 93       	st	Z+, r25
 92c:	22 50       	subi	r18, 0x02	; 2
 92e:	31 09       	sbc	r19, r1
 930:	39 83       	std	Y+1, r19	; 0x01
 932:	28 83       	st	Y, r18
 934:	3a c0       	rjmp	.+116    	; 0x9aa <malloc+0x124>
 936:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 93a:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 93e:	23 2b       	or	r18, r19
 940:	41 f4       	brne	.+16     	; 0x952 <malloc+0xcc>
 942:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 946:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 94a:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <__brkval+0x1>
 94e:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <__brkval>
 952:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 956:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 95a:	21 15       	cp	r18, r1
 95c:	31 05       	cpc	r19, r1
 95e:	41 f4       	brne	.+16     	; 0x970 <malloc+0xea>
 960:	2d b7       	in	r18, 0x3d	; 61
 962:	3e b7       	in	r19, 0x3e	; 62
 964:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 968:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 96c:	24 1b       	sub	r18, r20
 96e:	35 0b       	sbc	r19, r21
 970:	e0 91 0a 02 	lds	r30, 0x020A	; 0x80020a <__brkval>
 974:	f0 91 0b 02 	lds	r31, 0x020B	; 0x80020b <__brkval+0x1>
 978:	e2 17       	cp	r30, r18
 97a:	f3 07       	cpc	r31, r19
 97c:	a0 f4       	brcc	.+40     	; 0x9a6 <malloc+0x120>
 97e:	2e 1b       	sub	r18, r30
 980:	3f 0b       	sbc	r19, r31
 982:	28 17       	cp	r18, r24
 984:	39 07       	cpc	r19, r25
 986:	78 f0       	brcs	.+30     	; 0x9a6 <malloc+0x120>
 988:	ac 01       	movw	r20, r24
 98a:	4e 5f       	subi	r20, 0xFE	; 254
 98c:	5f 4f       	sbci	r21, 0xFF	; 255
 98e:	24 17       	cp	r18, r20
 990:	35 07       	cpc	r19, r21
 992:	48 f0       	brcs	.+18     	; 0x9a6 <malloc+0x120>
 994:	4e 0f       	add	r20, r30
 996:	5f 1f       	adc	r21, r31
 998:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <__brkval+0x1>
 99c:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <__brkval>
 9a0:	81 93       	st	Z+, r24
 9a2:	91 93       	st	Z+, r25
 9a4:	02 c0       	rjmp	.+4      	; 0x9aa <malloc+0x124>
 9a6:	e0 e0       	ldi	r30, 0x00	; 0
 9a8:	f0 e0       	ldi	r31, 0x00	; 0
 9aa:	cf 01       	movw	r24, r30
 9ac:	df 91       	pop	r29
 9ae:	cf 91       	pop	r28
 9b0:	1f 91       	pop	r17
 9b2:	0f 91       	pop	r16
 9b4:	08 95       	ret

000009b6 <free>:
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	00 97       	sbiw	r24, 0x00	; 0
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <free+0xa>
 9be:	81 c0       	rjmp	.+258    	; 0xac2 <free+0x10c>
 9c0:	fc 01       	movw	r30, r24
 9c2:	32 97       	sbiw	r30, 0x02	; 2
 9c4:	13 82       	std	Z+3, r1	; 0x03
 9c6:	12 82       	std	Z+2, r1	; 0x02
 9c8:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <__flp>
 9cc:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <__flp+0x1>
 9d0:	10 97       	sbiw	r26, 0x00	; 0
 9d2:	81 f4       	brne	.+32     	; 0x9f4 <free+0x3e>
 9d4:	20 81       	ld	r18, Z
 9d6:	31 81       	ldd	r19, Z+1	; 0x01
 9d8:	82 0f       	add	r24, r18
 9da:	93 1f       	adc	r25, r19
 9dc:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 9e0:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 9e4:	28 17       	cp	r18, r24
 9e6:	39 07       	cpc	r19, r25
 9e8:	51 f5       	brne	.+84     	; 0xa3e <free+0x88>
 9ea:	f0 93 0b 02 	sts	0x020B, r31	; 0x80020b <__brkval+0x1>
 9ee:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <__brkval>
 9f2:	67 c0       	rjmp	.+206    	; 0xac2 <free+0x10c>
 9f4:	ed 01       	movw	r28, r26
 9f6:	20 e0       	ldi	r18, 0x00	; 0
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	ce 17       	cp	r28, r30
 9fc:	df 07       	cpc	r29, r31
 9fe:	40 f4       	brcc	.+16     	; 0xa10 <free+0x5a>
 a00:	4a 81       	ldd	r20, Y+2	; 0x02
 a02:	5b 81       	ldd	r21, Y+3	; 0x03
 a04:	9e 01       	movw	r18, r28
 a06:	41 15       	cp	r20, r1
 a08:	51 05       	cpc	r21, r1
 a0a:	f1 f0       	breq	.+60     	; 0xa48 <free+0x92>
 a0c:	ea 01       	movw	r28, r20
 a0e:	f5 cf       	rjmp	.-22     	; 0x9fa <free+0x44>
 a10:	d3 83       	std	Z+3, r29	; 0x03
 a12:	c2 83       	std	Z+2, r28	; 0x02
 a14:	40 81       	ld	r20, Z
 a16:	51 81       	ldd	r21, Z+1	; 0x01
 a18:	84 0f       	add	r24, r20
 a1a:	95 1f       	adc	r25, r21
 a1c:	c8 17       	cp	r28, r24
 a1e:	d9 07       	cpc	r29, r25
 a20:	59 f4       	brne	.+22     	; 0xa38 <free+0x82>
 a22:	88 81       	ld	r24, Y
 a24:	99 81       	ldd	r25, Y+1	; 0x01
 a26:	84 0f       	add	r24, r20
 a28:	95 1f       	adc	r25, r21
 a2a:	02 96       	adiw	r24, 0x02	; 2
 a2c:	91 83       	std	Z+1, r25	; 0x01
 a2e:	80 83       	st	Z, r24
 a30:	8a 81       	ldd	r24, Y+2	; 0x02
 a32:	9b 81       	ldd	r25, Y+3	; 0x03
 a34:	93 83       	std	Z+3, r25	; 0x03
 a36:	82 83       	std	Z+2, r24	; 0x02
 a38:	21 15       	cp	r18, r1
 a3a:	31 05       	cpc	r19, r1
 a3c:	29 f4       	brne	.+10     	; 0xa48 <free+0x92>
 a3e:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__flp+0x1>
 a42:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__flp>
 a46:	3d c0       	rjmp	.+122    	; 0xac2 <free+0x10c>
 a48:	e9 01       	movw	r28, r18
 a4a:	fb 83       	std	Y+3, r31	; 0x03
 a4c:	ea 83       	std	Y+2, r30	; 0x02
 a4e:	49 91       	ld	r20, Y+
 a50:	59 91       	ld	r21, Y+
 a52:	c4 0f       	add	r28, r20
 a54:	d5 1f       	adc	r29, r21
 a56:	ec 17       	cp	r30, r28
 a58:	fd 07       	cpc	r31, r29
 a5a:	61 f4       	brne	.+24     	; 0xa74 <free+0xbe>
 a5c:	80 81       	ld	r24, Z
 a5e:	91 81       	ldd	r25, Z+1	; 0x01
 a60:	84 0f       	add	r24, r20
 a62:	95 1f       	adc	r25, r21
 a64:	02 96       	adiw	r24, 0x02	; 2
 a66:	e9 01       	movw	r28, r18
 a68:	99 83       	std	Y+1, r25	; 0x01
 a6a:	88 83       	st	Y, r24
 a6c:	82 81       	ldd	r24, Z+2	; 0x02
 a6e:	93 81       	ldd	r25, Z+3	; 0x03
 a70:	9b 83       	std	Y+3, r25	; 0x03
 a72:	8a 83       	std	Y+2, r24	; 0x02
 a74:	e0 e0       	ldi	r30, 0x00	; 0
 a76:	f0 e0       	ldi	r31, 0x00	; 0
 a78:	12 96       	adiw	r26, 0x02	; 2
 a7a:	8d 91       	ld	r24, X+
 a7c:	9c 91       	ld	r25, X
 a7e:	13 97       	sbiw	r26, 0x03	; 3
 a80:	00 97       	sbiw	r24, 0x00	; 0
 a82:	19 f0       	breq	.+6      	; 0xa8a <free+0xd4>
 a84:	fd 01       	movw	r30, r26
 a86:	dc 01       	movw	r26, r24
 a88:	f7 cf       	rjmp	.-18     	; 0xa78 <free+0xc2>
 a8a:	8d 91       	ld	r24, X+
 a8c:	9c 91       	ld	r25, X
 a8e:	11 97       	sbiw	r26, 0x01	; 1
 a90:	9d 01       	movw	r18, r26
 a92:	2e 5f       	subi	r18, 0xFE	; 254
 a94:	3f 4f       	sbci	r19, 0xFF	; 255
 a96:	82 0f       	add	r24, r18
 a98:	93 1f       	adc	r25, r19
 a9a:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <__brkval>
 a9e:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <__brkval+0x1>
 aa2:	28 17       	cp	r18, r24
 aa4:	39 07       	cpc	r19, r25
 aa6:	69 f4       	brne	.+26     	; 0xac2 <free+0x10c>
 aa8:	30 97       	sbiw	r30, 0x00	; 0
 aaa:	29 f4       	brne	.+10     	; 0xab6 <free+0x100>
 aac:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__flp+0x1>
 ab0:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__flp>
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <free+0x104>
 ab6:	13 82       	std	Z+3, r1	; 0x03
 ab8:	12 82       	std	Z+2, r1	; 0x02
 aba:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <__brkval+0x1>
 abe:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <__brkval>
 ac2:	df 91       	pop	r29
 ac4:	cf 91       	pop	r28
 ac6:	08 95       	ret

00000ac8 <_exit>:
 ac8:	f8 94       	cli

00000aca <__stop_program>:
 aca:	ff cf       	rjmp	.-2      	; 0xaca <__stop_program>
